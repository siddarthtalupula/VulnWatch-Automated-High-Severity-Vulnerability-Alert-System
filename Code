# Import Required Libraries

import feedparser
import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
import json
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

#Fetch and Parse RSS Feed
feed_url = 'https://www.tenable.com/plugins/feeds?sort=newest'
feed = feedparser.parse(feed_url)

# Date Calculation
# Calculates the current date at 12:00 AM and the date 1 day ago to filter entries from the last 24 hours:
now = datetime.combine(datetime.now().date(), datetime.min.time())
one_day_ago = now - timedelta(days=1)

# Function to Check Entry Age
# Defines a function to check if an RSS feed entry was published within the last 24 hours:
def is_recent(entry):
    try:
        entry_date = datetime(*entry.published_parsed[:6])
        return entry_date >= one_day_ago
    except AttributeError:
        return False

# Function to Retrieve Additional Information
# Defines a function to retrieve additional details from the vulnerability page by parsing JSON data embedded within a specific script tag:
def get_additional_info(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    script_tag = soup.find('script', id='__NEXT_DATA__')
    if not script_tag:
        return {"Error": "No __NEXT_DATA__ script tag found"}
    data = json.loads(script_tag.string)

    # Extract necessary fields
    try:
        plugin_data = data['props']['pageProps']['plugin']
        attributes = plugin_data.get('attributes', [])
        additional_info = {
            ...
        }

        # Add extra attributes
        excluded_attributes = {'enable_cgi_scanning', 'script_category', 'thorough_tests', 'generated_plugin'}
        for attr in attributes:
            name = attr.get('attribute_name')
            if name not in excluded_attributes:
                value = attr.get('attribute_value', 'N/A')
                additional_info[name] = value

        return additional_info
    except KeyError as e:
        return {"Error": f"Key {str(e)} not found in JSON data"}

# List of Software Names
# Defines a list of software names to filter relevant vulnerabilities based on the software mentioned in the description:
# Example: software_names = [Java, Python, etc]
software_names = []

# Function to Prepare Email Body
# Defines a function to prepare the email body using the filtered vulnerabilities, formatted in HTML:
def prepare_email_body(recent_entries):
    email_body = """
    <html>
    <head>
        <style>
            body {{ font-family: Arial, sans-serif; }}
            .container {{ background-color: #ffffff; margin: 20px auto; padding: 20px; border: 1px solid #ddd; max-width: 15cm; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); border-radius: 10px; word-wrap: break-word; overflow-wrap: break-word; text-align: left; }}
            img {{ width: 85px; height: 25px; }}
            h2 {{ font-size: 14px; color: #86BC24; }}
            hr {{ border: 1px solid #ddd; }}
            p {{ font-size: 12px; }}
            table {{ width: 100%; border-collapse: collapse; }}
            th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
            th {{ background-color: #f2f2f2; }}
            a {{ color: #007bff; text-decoration: none; }}
            a:hover {{ text-decoration: underline; }}
            h5 {{ font-size: 10px; color: grey; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h2>Threat Research Center</h2>
            <p>Hello,<br>Below is a table summarizing the day's high and critical CERT alerts. :</p>
            <hr>
            <h1>Summary of Alerts</h1>
            <div style="overflow-x: auto;">
                <table style="width: 100%; border-collapse: collapse; border: 1px solid #ddd;">
                    <tr>
                        <th style="border: 1px solid #ddd; padding: 8px; background-color: #f2f2f2;">ID</th>
                        <th style="border: 1px solid #ddd; padding: 8px; background-color: #f2f2f2;">Title</th>
                        <th style="border: 1px solid #ddd; padding: 8px; background-color: #f2f2f2;">CVE</th>
                        <th style="border: 1px solid #ddd; padding: 8px; background-color: #f2f2f2;">Synopsis</th>
                        <th style="border: 1px solid #ddd; padding: 8px; background-color: #f2f2f2;">Severity</th>
                        <th style="border: 1px solid #ddd; padding: 8px; background-color: #f2f2f2;">Score CVSS</th>
                        <th style="border: 1px solid #ddd; padding: 8px; background-color: #f2f2f2;">Reference to the CVE</th>
                    </tr>
    """

    for entry in recent_entries:
        additional_info = get_additional_info(entry.link)

        # Check if the CVSS v3 Base Score is available and greater than 7
        cvss_v3_base_score = additional_info.get('CVSS v3 Base Score', 'N/A')
        if cvss_v3_base_score != 'N/A' and float(cvss_v3_base_score) > 7:
            email_body += "<tr>"
            # Update "Composants concern√©s" based on software mentioned in Description
            software_mentioned = set()
            for software in software_names:
                if software.lower() in additional_info['Description'].lower():
                    software_mentioned.add(software)
            email_body += f"<td style='border: 1px solid #ddd; padding: 8px;'>{additional_info.get('ID', 'N/A')}</td>"
            email_body += f"<td style='border: 1px solid #ddd; padding: 8px;'>{additional_info.get('Title', 'N/A')}</td>"
            email_body += f"<td style='border: 1px solid #ddd; padding: 8px;'>{additional_info.get('CVSS Score', 'N/A')}</td>"
            email_body += f"<td style='border: 1px solid #ddd; padding: 8px;'>{additional_info.get('Synopsis', 'N/A')}</td>"
            email_body += f"<td style='border: 1px solid #ddd; padding: 8px;'>{additional_info.get('cvssV3Severity', 'N/A')}</td>"
            email_body += f"<td style='border: 1px solid #ddd; padding: 8px;'>{additional_info.get('CVSS v3 Base Score', 'N/A')}</td>"

            # Handle the "See Also" links
            see_also_links = additional_info.get('See Also', [])
            if see_also_links:
                links_html = ''.join([f"<a href='{link}'>{link}</a><br>" for link in see_also_links])
            else:
                links_html = 'N/A'
            email_body += f"<td style='border: 1px solid #ddd; padding: 8px;'>{links_html}</td>"

            email_body += "</tr>"

    email_body += """
                </table>
            </div>
            <hr>
            <h5 style="color: grey">CLASSIFICATION: Data Classification</h5>
        </div>
    </body>
    </html>
    """

    return email_body

# Filter Recent Entries
# Filters the recent entries from the RSS feed by checking if they were published within the last 24 hours:

recent_entries = [entry for entry in feed.entries if is_recent(entry)]

# Generate Email Body
# Prepares the email body using the filtered recent entries:
email_body = prepare_email_body(recent_entries)

sender_email = "from address"
receiver_email = "to address"
cc_emails = ["CC address"]
subject = f"CERT - Vulnerabilities with Score CVSS => 7 for {now.strftime('%d-%m-%Y')}"

# Prepare and Send Email
# Creates a MIME email object, adds the HTML body, and sends the email using an SMTP server:
msg = MIMEMultipart()
msg['From'] = sender_email
msg['To'] = receiver_email
msg['Cc'] = ", ".join(cc_emails)
msg['Subject'] = subject
msg.attach(MIMEText(email_body, 'html'))

with smtplib.SMTP('details of SMTP server', 25) as server:
    server.sendmail(sender_email, [receiver_email] + cc_emails, msg.as_string())

print("Email sent successfully!")
